- Erzeugen und Beenden von Threads
	Zum Erzeugen von Threads mithilfe der POSIX API mÃ¼ssen zuerst die Thread Attribute
	initialisiert und die gebrauchten flags gesetzt werden. In diesem Fall wird zur
	default initialisierung nur der detachstate auf Joinable gestellt.
	Zum Erzeugen wird pthread_create aufgerufen, welches den neuen Thread erstellt und
	auch startet (sofern RÃ¼ckgabe EOK).
	Das Beenden der Threads erfolgt explizit Ã¼ber pthread_exit, diese beendet den Thread und kehrt
	deshalb auch nicht zurÃ¼ck. Eventuell vorhandene clean-up handler werden dabei noch aufgerufen.
	Das pthread_exit kann aber auch implizit aufgerufen werden, indem ein Thread mit return beendet
	wird.

- Problematik DETACHED/JOINABLE
	Das Flag PTHREAD_CREATE_JOINABLE sorgt dafÃ¼r, dass bestimmte Ressourcen, wie z. B. der RÃ¼ckgabewert
	des Threads gespeichert werden und fÃ¼r die Funktion pthread_join noch zur VerfÃ¼gung stehen.
	Im Gegensatz dazu sorgt PTHREAD_CREATE_DETACHED, dass ein Thread unabhÃ¤ngig ist und alle
	Ressourcen des Threads bei dessen Beendigung freigegeben werden. Deshalb kann auch nicht
	auf einen "detachden" Thread gewartet werden.

- Übergabe von Parametern über “generische Pointer (void *)”
	Void Pointer Parameter werden normalerweise bei generischen Funktionen verwendet.
	"pthread_create" erwartet beispielweise eine Funktion die ein void Pointer entgegennimmt.
	Dadurch ist es möglich, Threads mit allen möglichen Datentypen als Startparameter zu definieren.
	Um mit dem generischen Pointer weiterarbeiten zu können, muss dieser wieder zurückgecasted werden
	z.B.: "*((int*)arg)"

- Umgang mit Returncodes bei Systemdiensten, die neue, „threadsafe“ Art
	Um zu überprüfen ob Funktionen wie "pthread_create" oder "pthread_join" fehlerfrei ausgeführt wurden
	muss man sich die Rückgabewerte ansehen. Die meisten Returncodes finden sich in "errno.h"